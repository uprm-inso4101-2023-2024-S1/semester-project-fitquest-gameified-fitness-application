{"ast":null,"code":"import isUnitlessNumber from \"../unitlessNumbers\";\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {\n    return value + 'px';\n  }\n  return ('' + value).trim();\n}\nexport default dangerousStyleValue;","map":{"version":3,"names":["isUnitlessNumber","dangerousStyleValue","name","value","isCustomProperty","isEmpty","hasOwnProperty","trim"],"sources":["C:/Users/pedro/Documents/FitQuest/semester-project-fitquest-gameified-fitness-application/node_modules/react-native-web/dist/modules/setValueForStyles/dangerousStyleValue.js"],"sourcesContent":["/* eslint-disable */\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * From React 16.0.0\r\n * \r\n */\r\n\r\nimport isUnitlessNumber from '../unitlessNumbers';\r\n\r\n/**\r\n * Convert a value into the proper css writable value. The style name `name`\r\n * should be logical (no hyphens), as specified\r\n * in `CSSProperty.isUnitlessNumber`.\r\n *\r\n * @param {string} name CSS property name such as `topMargin`.\r\n * @param {*} value CSS property value such as `10px`.\r\n * @return {string} Normalized style value with dimensions applied.\r\n */\r\nfunction dangerousStyleValue(name, value, isCustomProperty) {\r\n  // Note that we've removed escapeTextForBrowser() calls here since the\r\n  // whole string will be escaped when the attribute is injected into\r\n  // the markup. If you provide unsafe user data here they can inject\r\n  // arbitrary CSS which may be problematic (I couldn't repro this):\r\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\r\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\r\n  // This is not an XSS hole but instead a potential CSS injection issue\r\n  // which has lead to a greater discussion about how we're going to\r\n  // trust URLs moving forward. See #2115901\r\n\r\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\r\n  if (isEmpty) {\r\n    return '';\r\n  }\r\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {\r\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\r\n  }\r\n\r\n  return ('' + value).trim();\r\n}\r\nexport default dangerousStyleValue;"],"mappings":"AAYA,OAAOA,gBAAgB;AAWvB,SAASC,mBAAmBA,CAACC,IAAI,EAAEC,KAAK,EAAEC,gBAAgB,EAAE;EAW1D,IAAIC,OAAO,GAAGF,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAK,EAAE;EACzE,IAAIE,OAAO,EAAE;IACX,OAAO,EAAE;EACX;EACA,IAAI,CAACD,gBAAgB,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,CAAC,IAAI,EAAEH,gBAAgB,CAACM,cAAc,CAACJ,IAAI,CAAC,IAAIF,gBAAgB,CAACE,IAAI,CAAC,CAAC,EAAE;IACvI,OAAOC,KAAK,GAAG,IAAI;EACrB;EAEA,OAAO,CAAC,EAAE,GAAGA,KAAK,EAAEI,IAAI,CAAC,CAAC;AAC5B;AACA,eAAeN,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}