{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar TimerApp = function TimerApp(_ref) {\n  var _ref$initialTime = _ref.initialTime,\n    initialTime = _ref$initialTime === void 0 ? 0 : _ref$initialTime;\n  var _useState = useState(initialTime),\n    _useState2 = _slicedToArray(_useState, 2),\n    milliseconds = _useState2[0],\n    setMilliseconds = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isRunning = _useState4[0],\n    setIsRunning = _useState4[1];\n  useEffect(function () {\n    var interval;\n    if (isRunning) {\n      interval = setInterval(function () {\n        setMilliseconds(function (prevmilliseconds) {\n          return prevmilliseconds + 1;\n        });\n      }, 10);\n    }\n    return function () {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRunning]);\n  var startTimer = function startTimer() {\n    setIsRunning(true);\n  };\n  var stopTimer = function stopTimer() {\n    setIsRunning(false);\n  };\n  var resetTimer = function resetTimer() {\n    stopTimer();\n    setMilliseconds(0);\n  };\n  var toggleTimer = function toggleTimer() {\n    setIsRunning(!isRunning);\n  };\n  var hours = Math.floor(milliseconds / 3600000);\n  var minutes = Math.floor(milliseconds % 3600000 / 60000);\n  var seconds = Math.floor(milliseconds % 60000 / 1000);\n  var centiseconds = Math.floor(milliseconds % 1000 / 100);\n  var ms = milliseconds % 100;\n  var formatTime = function formatTime(unit) {\n    return unit < 10 ? '0' + unit : unit;\n  };\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [\"Time: \", formatTime(hours), \":\", formatTime(minutes), \":\", formatTime(seconds), \".\", centiseconds, ms < 10 ? '0' + ms : ms]\n    }), _jsx(Button, {\n      title: `Start Timer`,\n      onPress: startTimer\n    }), _jsx(Button, {\n      title: \"Stop Timer\",\n      onPress: stopTimer\n    }), _jsx(Button, {\n      title: \"Reset Timer\",\n      onPress: resetTimer\n    })]\n  });\n};\nexport default TimerApp;","map":{"version":3,"names":["React","useEffect","useState","jsxs","_jsxs","jsx","_jsx","TimerApp","_ref","_ref$initialTime","initialTime","_useState","_useState2","_slicedToArray","milliseconds","setMilliseconds","_useState3","_useState4","isRunning","setIsRunning","interval","setInterval","prevmilliseconds","clearInterval","startTimer","stopTimer","resetTimer","toggleTimer","hours","Math","floor","minutes","seconds","centiseconds","ms","formatTime","unit","View","children","Text","Button","title","onPress"],"sources":["C:/Users/pedro/Documents/FitQuest/semester-project-fitquest-gameified-fitness-application/Front End/components/TimerApp .tsx"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport { View, Text, Button, StyleSheet } from \"react-native\";\r\nimport React, { useEffect, useState } from 'react';\r\n\r\ninterface TimerAppProps {\r\n    initialTime?: number;\r\n}\r\n\r\nconst TimerApp: React.FC<TimerAppProps> = ({ initialTime = 0}) => {\r\n    const [milliseconds, setMilliseconds] = useState<number>(initialTime);\r\n    const [isRunning, setIsRunning] = useState<boolean>(false);\r\n\r\n    useEffect (() => {\r\n        let interval:  NodeJS.Timeout;\r\n\r\n        if(isRunning) {\r\n            interval = setInterval(()=> {\r\n                setMilliseconds(prevmilliseconds => prevmilliseconds + 1);\r\n            }, 10);\r\n        }\r\n\r\n        return () => {\r\n            if (interval) {\r\n                clearInterval(interval);\r\n            }\r\n        };\r\n\r\n        \r\n    }, [isRunning]);\r\n\r\n    const startTimer = () => {\r\n        setIsRunning(true);\r\n    };\r\n\r\n    const stopTimer = () => {\r\n        setIsRunning(false);\r\n    };\r\n\r\n    const resetTimer = () => {\r\n        stopTimer();\r\n        setMilliseconds(0);\r\n    };\r\n\r\n    const toggleTimer = () => {\r\n        setIsRunning(!isRunning)\r\n    }\r\n\r\n    // Formula to calculate hours, minutes, seconds, milliseconds and centiseconds\r\n    const hours = Math.floor(milliseconds / 3600000);\r\n    const minutes = Math.floor((milliseconds % 3600000) / 60000);\r\n    const seconds = Math.floor((milliseconds % 60000) / 1000);\r\n    const centiseconds = Math.floor((milliseconds % 1000) / 100);\r\n    const ms = milliseconds % 100;\r\n\r\n    // Format time to the desired format\r\n    const formatTime = (unit: number) => (unit < 10 ? '0' + unit : unit);\r\n\r\n    return (\r\n        <View>\r\n            <Text>Time: {formatTime(hours)}:{formatTime(minutes)}:{formatTime(seconds)}.{centiseconds}{ms < 10 ? '0' + ms : ms}</Text>\r\n\r\n            <Button title={`Start Timer`} onPress={startTimer} />\r\n            <Button title=\"Stop Timer\" onPress={stopTimer} />\r\n            <Button title=\"Reset Timer\" onPress={resetTimer} />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default TimerApp\r\n"],"mappings":";;;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAMnD,IAAMC,QAAiC,GAAG,SAApCA,QAAiCA,CAAAC,IAAA,EAA2B;EAAA,IAAAC,gBAAA,GAAAD,IAAA,CAArBE,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,CAAC,GAAAA,gBAAA;EACxD,IAAAE,SAAA,GAAwCT,QAAQ,CAASQ,WAAW,CAAC;IAAAE,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9DG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EACpC,IAAAI,UAAA,GAAkCd,QAAQ,CAAU,KAAK,CAAC;IAAAe,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAnDE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAE9BhB,SAAS,CAAE,YAAM;IACb,IAAImB,QAAyB;IAE7B,IAAGF,SAAS,EAAE;MACVE,QAAQ,GAAGC,WAAW,CAAC,YAAK;QACxBN,eAAe,CAAC,UAAAO,gBAAgB;UAAA,OAAIA,gBAAgB,GAAG,CAAC;QAAA,EAAC;MAC7D,CAAC,EAAE,EAAE,CAAC;IACV;IAEA,OAAO,YAAM;MACT,IAAIF,QAAQ,EAAE;QACVG,aAAa,CAACH,QAAQ,CAAC;MAC3B;IACJ,CAAC;EAGL,CAAC,EAAE,CAACF,SAAS,CAAC,CAAC;EAEf,IAAMM,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACrBL,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,IAAMM,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;IACpBN,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,IAAMO,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACrBD,SAAS,CAAC,CAAC;IACXV,eAAe,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,IAAMY,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACtBR,YAAY,CAAC,CAACD,SAAS,CAAC;EAC5B,CAAC;EAGD,IAAMU,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAChB,YAAY,GAAG,OAAO,CAAC;EAChD,IAAMiB,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEhB,YAAY,GAAG,OAAO,GAAI,KAAK,CAAC;EAC5D,IAAMkB,OAAO,GAAGH,IAAI,CAACC,KAAK,CAAEhB,YAAY,GAAG,KAAK,GAAI,IAAI,CAAC;EACzD,IAAMmB,YAAY,GAAGJ,IAAI,CAACC,KAAK,CAAEhB,YAAY,GAAG,IAAI,GAAI,GAAG,CAAC;EAC5D,IAAMoB,EAAE,GAAGpB,YAAY,GAAG,GAAG;EAG7B,IAAMqB,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAY;IAAA,OAAMA,IAAI,GAAG,EAAE,GAAG,GAAG,GAAGA,IAAI,GAAGA,IAAI;EAAA,CAAC;EAEpE,OACIhC,KAAA,CAACiC,IAAI;IAAAC,QAAA,GACDlC,KAAA,CAACmC,IAAI;MAAAD,QAAA,GAAC,QAAM,EAACH,UAAU,CAACP,KAAK,CAAC,EAAC,GAAC,EAACO,UAAU,CAACJ,OAAO,CAAC,EAAC,GAAC,EAACI,UAAU,CAACH,OAAO,CAAC,EAAC,GAAC,EAACC,YAAY,EAAEC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAGA,EAAE,GAAGA,EAAE;IAAA,CAAO,CAAC,EAE1H5B,IAAA,CAACkC,MAAM;MAACC,KAAK,EAAG,aAAa;MAACC,OAAO,EAAElB;IAAW,CAAE,CAAC,EACrDlB,IAAA,CAACkC,MAAM;MAACC,KAAK,EAAC,YAAY;MAACC,OAAO,EAAEjB;IAAU,CAAE,CAAC,EACjDnB,IAAA,CAACkC,MAAM;MAACC,KAAK,EAAC,aAAa;MAACC,OAAO,EAAEhB;IAAW,CAAE,CAAC;EAAA,CACjD,CAAC;AAEf,CAAC;AAED,eAAenB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}