{"ast":null,"code":"import UIManager from \"../../exports/UIManager\";\nvar TextInputState = {\n  _currentlyFocusedNode: null,\n  currentlyFocusedField: function currentlyFocusedField() {\n    if (document.activeElement !== this._currentlyFocusedNode) {\n      this._currentlyFocusedNode = null;\n    }\n    return this._currentlyFocusedNode;\n  },\n  focusTextInput: function focusTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = textFieldNode;\n      if (document.activeElement !== textFieldNode) {\n        UIManager.focus(textFieldNode);\n      }\n    }\n  },\n  blurTextInput: function blurTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = null;\n      if (document.activeElement === textFieldNode) {\n        UIManager.blur(textFieldNode);\n      }\n    }\n  }\n};\nexport default TextInputState;","map":{"version":3,"names":["UIManager","TextInputState","_currentlyFocusedNode","currentlyFocusedField","document","activeElement","focusTextInput","textFieldNode","focus","blurTextInput","blur"],"sources":["C:/Users/pedro/Documents/FitQuest/semester-project-fitquest-gameified-fitness-application/node_modules/react-native-web/dist/modules/TextInputState/index.js"],"sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\n\r\nimport UIManager from '../../exports/UIManager';\r\n\r\n/**\r\n * This class is responsible for coordinating the \"focused\"\r\n * state for TextInputs. All calls relating to the keyboard\r\n * should be funneled through here\r\n */\r\nvar TextInputState = {\r\n  /**\r\n   * Internal state\r\n   */\r\n  _currentlyFocusedNode: null,\r\n  /**\r\n   * Returns the ID of the currently focused text field, if one exists\r\n   * If no text field is focused it returns null\r\n   */\r\n  currentlyFocusedField() {\r\n    if (document.activeElement !== this._currentlyFocusedNode) {\r\n      this._currentlyFocusedNode = null;\r\n    }\r\n    return this._currentlyFocusedNode;\r\n  },\r\n  /**\r\n   * @param {Object} TextInputID id of the text field to focus\r\n   * Focuses the specified text field\r\n   * noop if the text field was already focused\r\n   */\r\n  focusTextInput(textFieldNode) {\r\n    if (textFieldNode !== null) {\r\n      this._currentlyFocusedNode = textFieldNode;\r\n      if (document.activeElement !== textFieldNode) {\r\n        UIManager.focus(textFieldNode);\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * @param {Object} textFieldNode id of the text field to focus\r\n   * Unfocuses the specified text field\r\n   * noop if it wasn't focused\r\n   */\r\n  blurTextInput(textFieldNode) {\r\n    if (textFieldNode !== null) {\r\n      this._currentlyFocusedNode = null;\r\n      if (document.activeElement === textFieldNode) {\r\n        UIManager.blur(textFieldNode);\r\n      }\r\n    }\r\n  }\r\n};\r\nexport default TextInputState;"],"mappings":"AAUA,OAAOA,SAAS;AAOhB,IAAIC,cAAc,GAAG;EAInBC,qBAAqB,EAAE,IAAI;EAK3BC,qBAAqB,WAAAA,sBAAA,EAAG;IACtB,IAAIC,QAAQ,CAACC,aAAa,KAAK,IAAI,CAACH,qBAAqB,EAAE;MACzD,IAAI,CAACA,qBAAqB,GAAG,IAAI;IACnC;IACA,OAAO,IAAI,CAACA,qBAAqB;EACnC,CAAC;EAMDI,cAAc,WAAAA,eAACC,aAAa,EAAE;IAC5B,IAAIA,aAAa,KAAK,IAAI,EAAE;MAC1B,IAAI,CAACL,qBAAqB,GAAGK,aAAa;MAC1C,IAAIH,QAAQ,CAACC,aAAa,KAAKE,aAAa,EAAE;QAC5CP,SAAS,CAACQ,KAAK,CAACD,aAAa,CAAC;MAChC;IACF;EACF,CAAC;EAMDE,aAAa,WAAAA,cAACF,aAAa,EAAE;IAC3B,IAAIA,aAAa,KAAK,IAAI,EAAE;MAC1B,IAAI,CAACL,qBAAqB,GAAG,IAAI;MACjC,IAAIE,QAAQ,CAACC,aAAa,KAAKE,aAAa,EAAE;QAC5CP,SAAS,CAACU,IAAI,CAACH,aAAa,CAAC;MAC/B;IACF;EACF;AACF,CAAC;AACD,eAAeN,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}