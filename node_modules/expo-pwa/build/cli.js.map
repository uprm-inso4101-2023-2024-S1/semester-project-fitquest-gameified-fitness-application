{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":";;;;;;AAEA,kDAA0B;AAC1B,yCAAoC;AACpC,4CAAoB;AACpB,+BAAwD;AAExD,wBAAyD;AACzD,iCAA+C;AAE/C,sDAAoC;AAEpC,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAErD,MAAM,OAAO,GAAG,IAAI,mBAAO,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,CAAC;AAE/E,MAAM,sBAAsB,GAAG,CAAC,GAAW,EAAE,OAAe,EAAE,EAAE;IAC9D,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,CAAC,KAAK,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,4DAA4D,CAAC,CAAC,CAAC;QAC/F,OAAO,CAAC,KAAK,CAAC,mBAAmB,OAAO,uBAAuB,CAAC,CAAC;QACjE,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KAClB;AACH,CAAC,CAAC;AAoBF,SAAS,aAAa,CAAC,IAAY,EAAE,WAAqB,EAAE;IAC1D,OAAO,OAAO;SACX,OAAO,CAAC,GAAG,IAAI,iBAAiB,CAAC;SACjC,MAAM,CAAC,oBAAoB,EAAE,uBAAuB,CAAC;SACrD,MAAM,CAAC,qBAAqB,EAAE,+CAA+C,CAAC;SAC9E,MAAM,CAAC,qBAAqB,EAAE,kCAAkC,CAAC;SACjE,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QACjB,IAAI,CAAC,QAAQ,CAAC,MAAM;YAAE,OAAO;QAE7B,OAAO,CAAC,GAAG,EAAE,CAAC;QACd,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzB,OAAO,CAAC,GAAG,EAAE,CAAC;QACd,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,IAAI,OAAO,EAAE,CAAC,CAAC;SAChD;QACD,OAAO,CAAC,GAAG,EAAE,CAAC;IAChB,CAAC,CAAC,CAAC;AACP,CAAC;AAED,SAAS,YAAY,CAAC,IAAY,EAAE,WAAqB,EAAE;IACzD,OAAO,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC;SACjC,MAAM,CAAC,cAAc,EAAE,qCAAqC,EAAE,SAAS,CAAC;SACxE,MAAM,CAAC,aAAa,EAAE,oEAAoE,CAAC,CAAC;AACjG,CAAC;AAED,YAAY,CAAC,MAAM,EAAE,CAAC,iCAAiC,EAAE,iCAAiC,CAAC,CAAC;KACzF,WAAW,CAAC,0CAA0C,CAAC;KACvD,MAAM,CAAC,qBAAqB,EAAE,0CAA0C,CAAC;KACzE,MAAM,CAAC,KAAK,EAAE,gBAAwB,EAAE,OAAgC,EAAE,EAAE;;IAC3E,sBAAsB,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACjD,MAAM,WAAW,GAAG,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,OAAO,CAAC,GAAG,EAAE,CAAC;IACtD,MAAM,MAAM,GAAG,MAAA,OAAO,CAAC,MAAM,mCAAI,IAAA,WAAI,EAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAE1D,IAAI;QACF,MAAM,cAAc,CAAC,WAAW,EAAE,OAAO,CAAC,QAAQ,GAAG,OAAO,EAAE;YAC5D,GAAG,EAAE,OAAO,CAAC,KAAK;YAClB,MAAM;YACN,UAAU,EAAE,OAAO,CAAC,MAAM,IAAI,MAAM;YACpC,UAAU,EAAE,OAAO,CAAC,MAAM;YAC1B,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,aAAa;SACtC,CAAC,CAAC;QACH,MAAM,IAAA,gBAAY,GAAE,CAAC;KACtB;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,oBAAoB,CAAC,KAAK,CAAC,CAAC;KACnC;AACH,CAAC,CAAC,CAAC;AAEL,YAAY,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC,CAAC;KACvC,WAAW,CAAC,qCAAqC,CAAC;KAClD,MAAM,CAAC,KAAK,EAAE,gBAAwB,EAAE,OAA4B,EAAE,EAAE;;IACvE,sBAAsB,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACjD,MAAM,WAAW,GAAG,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,OAAO,CAAC,GAAG,EAAE,CAAC;IACtD,MAAM,MAAM,GAAG,MAAA,OAAO,CAAC,MAAM,mCAAI,IAAA,WAAI,EAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAE1D,IAAI;QACF,MAAM,cAAc,CAAC,WAAW,EAAE,SAAS,EAAE;YAC3C,GAAG,EAAE,OAAO,CAAC,KAAK;YAClB,MAAM;YACN,UAAU,EAAE,OAAO,CAAC,MAAM,IAAI,MAAM;YACpC,UAAU,EAAE,OAAO,CAAC,MAAM;YAC1B,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,aAAa;SACtC,CAAC,CAAC;QACH,MAAM,IAAA,gBAAY,GAAE,CAAC;KACtB;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,oBAAoB,CAAC,KAAK,CAAC,CAAC;KACnC;AACH,CAAC,CAAC,CAAC;AAEL,YAAY,CAAC,QAAQ,EAAE,CAAC,6CAA6C,CAAC,CAAC;KACpE,WAAW,CAAC,8CAA8C,CAAC;KAC3D,MAAM,CAAC,KAAK,EAAE,gBAAwB,EAAE,OAA4B,EAAE,EAAE;;IACvE,sBAAsB,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACjD,MAAM,WAAW,GAAG,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,OAAO,CAAC,GAAG,EAAE,CAAC;IACtD,MAAM,MAAM,GAAG,MAAA,OAAO,CAAC,MAAM,mCAAI,IAAA,WAAI,EAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAE1D,IAAI;QACF,MAAM,cAAc,CAAC,WAAW,EAAE,QAAQ,EAAE;YAC1C,GAAG,EAAE,OAAO,CAAC,KAAK;YAClB,MAAM;YACN,UAAU,EAAE,OAAO,CAAC,MAAM,IAAI,MAAM;YACpC,UAAU,EAAE,OAAO,CAAC,MAAM;YAC1B,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,OAAO;SAChC,CAAC,CAAC;QACH,MAAM,IAAA,gBAAY,GAAE,CAAC;KACtB;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,oBAAoB,CAAC,KAAK,CAAC,CAAC;KACnC;AACH,CAAC,CAAC,CAAC;AAEL,aAAa,CAAC,UAAU,EAAE,CAAC,uBAAuB,CAAC,CAAC;KACjD,WAAW,CAAC,uDAAuD,CAAC;KACpE,MAAM,CAAC,KAAK,EAAE,gBAAwB,EAAE,OAA+B,EAAE,EAAE;;IAC1E,MAAM,WAAW,GAAG,IAAA,cAAO,EAAC,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IAC/D,MAAM,MAAM,GAAG,MAAA,OAAO,CAAC,MAAM,mCAAI,IAAA,WAAI,EAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAC1D,MAAM,UAAU,GAAG,IAAA,cAAO,EAAC,MAAA,OAAO,CAAC,MAAM,mCAAI,MAAM,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,IAAA,cAAO,EAAC,MAAM,CAAC,CAAC;IAEnC,IAAI;QACF,MAAM,KAAK,GAAG,MAAM,IAAA,wBAAqB,EACvC;YACE,WAAW,EAAE,IAAA,cAAO,EAAC,WAAW,CAAC;YACjC,UAAU;SACX,EACD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,cAAO,EAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CACnD,CAAC;QACF,MAAM,kBAAkB,CAAC,UAAU,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QACxD,MAAM,IAAA,gBAAY,GAAE,CAAC;KACtB;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,oBAAoB,CAAC,KAAK,CAAC,CAAC;KACnC;AACH,CAAC,CAAC,CAAC;AAEL,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAU5B,KAAK,UAAU,cAAc,CAC3B,WAA+B,EAC/B,IAAY,EACZ,EAAE,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,eAAe,EAAE,UAAU,GAAG,SAAS,EAAgB;IAEzF,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,CAAC,KAAK,CACX,eAAK,CAAC,KAAK,CAAC,KAAK,CACf,4BAA4B,UAAU,kDAAkD,CACzF,CACF,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KAClB;IACD,MAAM,KAAK,GAAG,MAAM,IAAA,gBAAa,EAC/B,IAAI,EACJ,EAAE,WAAW,EAAE,IAAA,cAAO,EAAC,WAAW,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,UAAU,EAAE,IAAA,cAAO,EAAC,UAAU,CAAC,EAAE,EACvF,EAAE,GAAG,EAAE,eAAe,EAAE,UAAU,EAAE,CACrC,CAAC;IAEF,MAAM,UAAU,GAAG,IAAA,cAAO,EAAC,MAAM,CAAC,CAAC;IACnC,MAAM,kBAAkB,CAAC,UAAU,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;AAC1D,CAAC;AAED,KAAK,UAAU,kBAAkB,CAAC,UAAkB,EAAE,UAAkB,EAAE,KAAmB;;IAC3F,YAAE,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IAE9C,MAAM,IAAI,GAAa,EAAE,CAAC;IAC1B,MAAM,QAAQ,GAAwB,EAAE,CAAC;IAEzC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,MAAA,MAAA,IAAI,CAAC,GAAG,0CAAE,UAAU,0CAAE,IAAI,EAAE;gBAC9B,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,IAAA,eAAQ,EAAC,UAAU,EAAE,MAAA,MAAA,IAAI,CAAC,GAAG,0CAAE,UAAU,0CAAE,IAAI,CAAC,CAAC;aACnF;YACD,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,IAAA,4BAAqB,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5C;QACD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,iBAAiB;YACjB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAAE,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC;YACxD,IAAI,MAAA,IAAI,CAAC,QAAQ,0CAAE,GAAG,EAAE;gBACtB,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,IAAA,eAAQ,EAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACnE;YACD,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACpC;QAED,cAAc;QACd,MAAM,SAAS,GAAG,IAAA,cAAO,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACvD,YAAE,CAAC,SAAS,CAAC,IAAA,cAAO,EAAC,SAAS,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD,YAAE,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAChD;IAED,IAAI,IAAI,CAAC,MAAM,EAAE;QACf,OAAO,CAAC,IAAI,CAAC,CAAC;KACf;IAED,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE;QAChC,WAAW,CAAC,QAAQ,CAAC,CAAC;KACvB;AACH,CAAC;AAED,SAAS,WAAW,CAAC,QAA6B;IAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM;QAAE,OAAO;IAC1C,OAAO,CAAC,GAAG,EAAE,CAAC;IACd,OAAO,CAAC,GAAG,CACT,eAAK,CAAC,OAAO,CACX,uFAAuF,CACxF,CACF,CAAC;IACF,OAAO,CAAC,GAAG,EAAE,CAAC;IACd,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/C,OAAO,CAAC,GAAG,EAAE,CAAC;AAChB,CAAC;AAED,SAAS,OAAO,CAAC,IAAc;IAC7B,IAAI,CAAC,IAAI,CAAC,MAAM;QAAE,OAAO;IACzB,OAAO,CAAC,GAAG,EAAE,CAAC;IACd,OAAO,CAAC,GAAG,CACT,eAAK,CAAC,OAAO,CAAC,gFAAgF,CAAC,CAChG,CAAC;IACF,OAAO,CAAC,GAAG,EAAE,CAAC;IACd,KAAK,MAAM,QAAQ,IAAI,IAAI,EAAE;QAC3B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACvB;IACD,OAAO,CAAC,GAAG,EAAE,CAAC;AAChB,CAAC;AAED,SAAS,YAAY,CAAC,KAAU;IAC9B,OAAO,KAAK,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpF,CAAC;AAED,KAAK,UAAU,oBAAoB,CAAC,MAAW;IAC7C,OAAO,CAAC,GAAG,EAAE,CAAC;IACd,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC5B,IAAI,MAAM,CAAC,OAAO,EAAE;QAClB,OAAO,CAAC,GAAG,CAAC,KAAK,eAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KAC/D;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,KAAK,CAAA,iEAAiE,CAAC,CAAC;QAChG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACrB;IACD,OAAO,CAAC,GAAG,EAAE,CAAC;IAEd,MAAM,IAAA,gBAAY,GAAE,CAAC;IAErB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC","sourcesContent":["#!/usr/bin/env node\nimport type { ResizeMode } from '@expo/image-utils';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport fs from 'fs';\nimport { dirname, join, relative, resolve } from 'path';\n\nimport { generateAsync, generateManifestAsync } from '.';\nimport { htmlTagObjectToString } from './HTML';\nimport { HTMLOutput } from './Manifest.types';\nimport shouldUpdate from './update';\n\nconst packageJson = () => require('../package.json');\n\nconst program = new Command(packageJson().name).version(packageJson().version);\n\nconst validateSourceArgument = (src: string, command: string) => {\n  if (!src) {\n    console.error(chalk.black.bgRed(`You must supply a valid image path or remote URL. Example:`));\n    console.error(`\\n   $ expo-pwa ${command} -i ./assets/icon.png`);\n    console.error();\n    process.exit(-1);\n  }\n};\n\ntype ManifestCommandOptions = {\n  output: string;\n  input?: string;\n  public?: string;\n};\n\ntype AssetCommandOptions = {\n  output: string;\n  input: string;\n  public?: string;\n  resize?: string;\n  color?: string;\n};\n\ntype IconAssetCommandOptions = AssetCommandOptions & {\n  platform: 'safari' | 'chrome';\n};\n\nfunction outputCommand(name: string, examples: string[] = []): Command {\n  return program\n    .command(`${name} [project-root]`)\n    .option('-i, --input <file>', 'Input file to process')\n    .option('-o, --output <path>', 'Output directory. Default: <project-root/>web')\n    .option('-p, --public <path>', 'Public folder. Default: <output>')\n    .on('--help', () => {\n      if (!examples.length) return;\n\n      console.log();\n      console.log('Examples:');\n      console.log();\n      for (const example of examples) {\n        console.log(`  $ expo-pwa ${name} ${example}`);\n      }\n      console.log();\n    });\n}\n\nfunction assetCommand(name: string, examples: string[] = []): Command {\n  return outputCommand(name, examples)\n    .option('-r, --resize', 'Resize mode to use [contain, cover]', 'contain')\n    .option('-c, --color', 'CSS background color for to use for the images (should be opaque).');\n}\n\nassetCommand('icon', ['--platform safari -i ./icon.png', '--platform chrome -i ./icon.png'])\n  .description('Generate the home screen icons for a PWA')\n  .option('--platform [string]', 'Platform to generate for: safari, chrome')\n  .action(async (inputProjectRoot: string, options: IconAssetCommandOptions) => {\n    validateSourceArgument(options.input, 'favicon');\n    const projectRoot = inputProjectRoot ?? process.cwd();\n    const output = options.output ?? join(projectRoot, 'web');\n\n    try {\n      await generateAssets(projectRoot, options.platform + '-icon', {\n        src: options.input,\n        output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'transparent',\n      });\n      await shouldUpdate();\n    } catch (error) {\n      await commandDidThrowAsync(error);\n    }\n  });\n\nassetCommand('favicon', ['-i ./icon.png'])\n  .description('Generate the favicons for a website')\n  .action(async (inputProjectRoot: string, options: AssetCommandOptions) => {\n    validateSourceArgument(options.input, 'favicon');\n    const projectRoot = inputProjectRoot ?? process.cwd();\n    const output = options.output ?? join(projectRoot, 'web');\n\n    try {\n      await generateAssets(projectRoot, 'favicon', {\n        src: options.input,\n        output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'transparent',\n      });\n      await shouldUpdate();\n    } catch (error) {\n      await commandDidThrowAsync(error);\n    }\n  });\n\nassetCommand('splash', ['--color blue --resize cover -i ./splash.png'])\n  .description('Generate the Safari splash screens for a PWA')\n  .action(async (inputProjectRoot: string, options: AssetCommandOptions) => {\n    validateSourceArgument(options.input, 'favicon');\n    const projectRoot = inputProjectRoot ?? process.cwd();\n    const output = options.output ?? join(projectRoot, 'web');\n\n    try {\n      await generateAssets(projectRoot, 'splash', {\n        src: options.input,\n        output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'white',\n      });\n      await shouldUpdate();\n    } catch (error) {\n      await commandDidThrowAsync(error);\n    }\n  });\n\noutputCommand('manifest', ['-i ./random.config.js'])\n  .description('Generate the PWA manifest from an Expo project config')\n  .action(async (inputProjectRoot: string, options: ManifestCommandOptions) => {\n    const projectRoot = resolve(inputProjectRoot ?? process.cwd());\n    const output = options.output ?? join(projectRoot, 'web');\n    const publicPath = resolve(options.public ?? output);\n    const outputPath = resolve(output);\n\n    try {\n      const items = await generateManifestAsync(\n        {\n          projectRoot: resolve(projectRoot),\n          publicPath,\n        },\n        options.input ? resolve(options.input) : undefined\n      );\n      await resolveOutputAsync(publicPath, outputPath, items);\n      await shouldUpdate();\n    } catch (error) {\n      await commandDidThrowAsync(error);\n    }\n  });\n\nprogram.parse(process.argv);\n\ntype AssetOptions = {\n  src: string;\n  output: string;\n  publicPath: string;\n  color: string;\n  resizeMode?: string;\n};\n\nasync function generateAssets(\n  projectRoot: string | undefined,\n  type: string,\n  { src, output, publicPath, color: backgroundColor, resizeMode = 'contain' }: AssetOptions\n) {\n  if (!isResizeMode(resizeMode)) {\n    console.error(\n      chalk.black.bgRed(\n        `The provided resizeMode \"${resizeMode}\" is invalid. Please use one of [cover, contain]`\n      )\n    );\n    process.exit(-1);\n  }\n  const items = await generateAsync(\n    type,\n    { projectRoot: resolve(projectRoot || process.cwd()), publicPath: resolve(publicPath) },\n    { src, backgroundColor, resizeMode }\n  );\n\n  const outputPath = resolve(output);\n  await resolveOutputAsync(publicPath, outputPath, items);\n}\n\nasync function resolveOutputAsync(publicPath: string, outputPath: string, items: HTMLOutput[]) {\n  fs.mkdirSync(outputPath, { recursive: true });\n\n  const meta: string[] = [];\n  const manifest: Record<string, any> = {};\n\n  for (const item of items) {\n    if (item.tag) {\n      if (item.tag?.attributes?.href) {\n        item.tag.attributes.href = '/' + relative(publicPath, item.tag?.attributes?.href);\n      }\n      // Write HTML\n      meta.push(htmlTagObjectToString(item.tag));\n    }\n    if (item.manifest) {\n      // Write Manifest\n      if (!Array.isArray(manifest.icons)) manifest.icons = [];\n      if (item.manifest?.src) {\n        item.manifest.src = '/' + relative(publicPath, item.manifest.src);\n      }\n      manifest.icons.push(item.manifest);\n    }\n\n    // Write image\n    const assetPath = resolve(outputPath, item.asset.path);\n    fs.mkdirSync(dirname(assetPath), { recursive: true });\n    fs.writeFileSync(assetPath, item.asset.source);\n  }\n\n  if (meta.length) {\n    logMeta(meta);\n  }\n\n  if (Object.keys(manifest).length) {\n    logManifest(manifest);\n  }\n}\n\nfunction logManifest(manifest: Record<string, any>) {\n  if (!Object.keys(manifest).length) return;\n  console.log();\n  console.log(\n    chalk.magenta(\n      '\\u203A Copy the following lines into your PWA `manifest.json` to link the new assets.'\n    )\n  );\n  console.log();\n  console.log(JSON.stringify(manifest, null, 2));\n  console.log();\n}\n\nfunction logMeta(meta: string[]) {\n  if (!meta.length) return;\n  console.log();\n  console.log(\n    chalk.magenta('\\u203A Copy the following lines into your HTML <head/> to link the new assets.')\n  );\n  console.log();\n  for (const metaLine of meta) {\n    console.log(metaLine);\n  }\n  console.log();\n}\n\nfunction isResizeMode(input: any): input is ResizeMode {\n  return input && ['contain', 'cover', 'fill', 'inside', 'outside'].includes(input);\n}\n\nasync function commandDidThrowAsync(reason: any) {\n  console.log();\n  console.log('Aborting run');\n  if (reason.command) {\n    console.log(`  ${chalk.magenta(reason.command)} has failed.`);\n  } else {\n    console.log(chalk.black.bgRed`An unexpected error was encountered. Please report it as a bug:`);\n    console.log(reason);\n  }\n  console.log();\n\n  await shouldUpdate();\n\n  process.exit(1);\n}\n"]}